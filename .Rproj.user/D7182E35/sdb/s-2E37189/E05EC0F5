{
    "contents" : "\n\n# RANDOM PROJECT ANALYSES\n\nsetwd(\"/Users/zeekatherine\")\n\n\n\nrnd <- read.csv(\"~/Desktop/R Files/Random_Project/random.proj_160526c.csv\")\n\n\nlibrary(nlme)\nlibrary(lme4)\nlibrary(ggplot2)\ntheme_set(theme_bw(base_size = 14))\n\n#For dotplots\nlibrary(Rcmdr)\n\n\n#### RECODING TIME ####\n\n# so that one unit (-.5, .5) = duration of study\nrnd$trial40 <- (rnd$trial_num + 1) \nrnd$trial40c <- (rnd$trial40 - 20)/40\n\n\n#### TRIMMING & TRANSFORMING RT ####\n\n# rt density plot\nggplot(rnd, aes(x=rt)) + \n  geom_density()\n\n# trimmed data: removed any < 100 ms and any greater than 3 SD above mean (1.29+.8*3=3.69)\nsd(rnd$rt) # SD = 0.80\nsummary(rnd$rt) # M = 1.29\nrndt <- subset(rnd, rt >= .01 & rt < 3.69)\n\n##log transform latency scores\nrndt$logrt <- log(rndt$rt)\n\n# log rt density plot - normal !\nggplot(rndt, aes(x=logrt)) + \n  geom_density()\n\n\n\n#### ANALYSES ####\n\n### PRACTICE EFFECT? opposite - FATIGUE!\n#random intercept & slope for trial number (centered -.5, .5)\nsummary(lme(fixed=rt ~ trial40c ,  data=rndt, random= ~ 1 + trial40c | id))\n\n\n### VALENCE EFFECT (objective valence of words)\n# simple regression: no main effect of valence on rt\nsummary(lm(rt ~ valence, rndt))\n\n\n#random intercept model - ns fixed\nsummary(lme(fixed=rt ~ valence + trial40c,  data=rndt, random= ~ 1 | id))\n\n#random intercept & slope  - ns fixed\nsummary(lme(fixed=rt ~ valence + trial40c,  data=rndt, random= ~ 1 + valence | id))\n\n\n# plotted: no fixed effect because of heterogeneity! \n# failure to replicate main effect is case in point :)\nggplot(data=rndt, aes(x=valence, y=logrt)) +\n  geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +\n  labs(title = \"Log RT by Valence\", x=\"id\", y=\"Log RT\") +\n  stat_summary(aes(group=key), fun.y = mean, geom=\"point\", colour=\"black\", size=2) +\n  stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +\n  scale_color_manual(values=c(\"orangered3\", \"green4\")) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        legend.position='none',\n        plot.title = element_text(lineheight=.8, face=\"bold\"),\n        axis.title.y = element_text(face=\"bold\", vjust=0.5),\n        axis.title.x = element_text(face=\"bold\", vjust=-0.35)) +\n  facet_wrap(~id) \n\n\n\n\n### SELF-RELEVANCE EFFECT (endorsed as self-descriptive) - \n# respond sig faster to self-descriptive words\n\n# simple regression: sig main effect of self-relevance on rt\nsummary(lm(rt ~ key, rndt))\n\n#random intercept model\nsummary(lme(fixed=rt ~ key +trial40c ,  data=rndt, random= ~ 1 | id))\n\n#random intercept & slope\nsummary(lme(fixed=rt ~ key +trial40c,  data=rndt, random= ~ 1 + key | id))\n\n\n\n#vlabeller <- function(var, value){\n#  value <- as.character(value)\n#  if (var==\"key\") { \n#    value[value==\"down\"] <- \"Not\"\n#    value[value==\"up\"]   <- \"Self\"\n#  }\n#  return(value)\n#}\n\n\nggplot(data=rndt, aes(x=key, y=logrt)) +\n  geom_jitter(aes(color=as.factor(key)), position = position_jitter(width = .2), size=1.5) +\n  labs(title = \"Log RT by Self-Relevance\", x=\"id\", y=\"Log RT\") +\n  stat_summary(aes(group=key), fun.y = mean, geom=\"point\", colour=\"black\", size=2) +\n  stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +\n  scale_color_manual(values=c(\"orangered3\", \"green4\")) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        legend.position='none',\n        plot.title = element_text(lineheight=.8, face=\"bold\"),\n        axis.title.y = element_text(face=\"bold\", vjust=0.5),\n        axis.title.x = element_text(face=\"bold\", vjust=-0.35)) +\n  facet_wrap(~id) \n\n\n\n# VALENCE controlling for self-relevance (ns)\n\n#random intercept model\nsummary(lme(fixed=rt ~ valence + key + trial40c,  data=rndt, random= ~ 1 | id))\n\n#random intercept & slope\nsummary(lme(fixed=rt ~ valence + key + trial40c,  data=rndt, random= ~ 1 + valence | id))\n\n\n\n##### Only looking at traits rated as self-descriptive ######\n\n\nrndtb2 <- subset(rndt, key == \"up\")\n\n# standard model \nsummary(lm(rt~valence + trial40c, data = rndtb2))\n\n#random intercept model\nsummary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 | id))\n\n#random intercept & slope\nsummary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence | id))\n\n\n\n\nselfrelplot <- ggplot(data=rndtb2, aes(x=valence, y=logrt)) +\n  geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +\n  labs(title = \"Log RT by Valence - Self-Relevant Traits Only\", x=\"id\", y=\"Log RT\") +\n  stat_summary(aes(group=valence), fun.y = mean, geom=\"point\", colour=\"black\", size=2) +\n  stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +\n  scale_color_manual(values=c(\"orangered3\", \"green4\")) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        legend.position='none',\n        plot.title = element_text(lineheight=.8, face=\"bold\"),\n        axis.title.y = element_text(face=\"bold\", vjust=0.5),\n        axis.title.x = element_text(face=\"bold\", vjust=-0.35)) +\n  facet_wrap(~id) \nggsave(selfrelplot, file = \"selfrelplot.pdf\", height = 40/2.54, width = 64/2.54)\n\n\n###### Time Course #######\n\n# random slope and intercept for trial number\nsummary(lme(fixed=rt ~ valence * trial40c,  data=rndtb2, random= ~ trial40c | id))\n\nsummary(lme(fixed=rt ~ valence * trial40c,  data=rndtb2, random= ~ valence * trial40c | id))\n\n\n\n####### Updates 160607 - Stricter Exclusion Cutoff ######\n\n\n# trimmed data: removed any < 100 ms and any greater than 2 SD above mean (1.29+.8*2=2.89)\nsd(rnd$rt) # SD = 0.80\nsummary(rnd$rt) # M = 1.29\n\nquantile(rnd$rt, c(.90, .95, .99))\n\nrndtb <- subset(rnd, rt >= .01 & rt < 2)\n\n\n\n##log transform latency scores\nrndtb$logrt <- log(rndtb$rt)\n\n\n\nrndtb2 <- subset(rndtb, key == \"up\")\n\n# standard model -- Significant main effect of valence\nsummary(lm(logrt~valence + trial40c, data = rndtb2))\n\n#random intercept model\nsummary(lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 | id))\n\n#random intercept & slope of valence\nsummary(lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence | id))\n\n#random intercept & slope of valence and timee\nvalenceslope <- (lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id))\nnoslope <- (lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + trial40c | id))\n\nsummary(valenceslope)\nvposranef<- -0.05165573 + ranef(valenceslope)[2]\nmean(vposranef$valencepositive)\nplot(density(vposranef$valencepositive))\nquantile(vposranef$valencepositive)\nDotplot(vposranef$valencepositive)\n\nsummary(noslope)\n\n# look at change in loglikelihood (multiply by -2?)\n# obtain degrees of freedom: \n(-2*-101.7602) # this means that there is a need for random effects!\n(-2*-107.9709) # with random slope of valence, this means that there is a need for random effects!\n\nanova(valenceslope, noslope)\n# for tests on random effects: \n\n\n# Examine distribution of random effects\n\n#### Test update 160611 4:53 pm#####\n\n#### Update by NB 5:41pm 160611 #############\n",
    "created" : 1464957952885.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2628473058",
    "id" : "E05EC0F5",
    "lastKnownWriteTime" : 1467997623,
    "path" : "~/KZNB/Random_Project_160603_KZ.R",
    "project_path" : "Random_Project_160603_KZ.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}