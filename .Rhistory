NA, NA, "Vd2X",
NA, NA, NA, "VY",
NA, NA, NA, NA, "VdY",
NA, NA, NA, NA, NA, "Vd2Y",
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
name="S",
byrow=TRUE,
lbound=c(0.00000001,
NA, 0.00000001,
NA, NA, 0.00000001,
NA, NA, NA, 0.00000001,
NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
),
mxMatrix("Diag", embedD*numIndicators, embedD*numIndicators,
values=.8,
free=TRUE,
labels=c(rep("uX", embedD), rep("uY", embedD)),
name="U",
lbound=0.000001
),
mxMatrix("Iden", 8, name="I"),
mxAlgebra(L %*% solve(I-A) %*% S %*% t(solve(I-A)) %*% t(L) + U,
name="R",
dimnames = list(manifestVars, manifestVars)
),
mxExpectationNormal(covariance="R"),
mxFitFunctionML(),
mxData(cov(tEmbedded),
type="cov",
numObs=dim(tEmbedded)[1]
)
)
ldeModel1CoupledFit <- mxRun(ldeModelCoupled1)
ldeout[(dyadids$rownum[dyadids$dyad==i]), ] = c(dyad = i, etaX.est = ldeModel1CoupledFit$output$estimate["etaX"],
zetaX.est =  ldeModel1CoupledFit$output$estimate["zetaX"],
etaX.se = ldeModel1CoupledFit$output$standardErrors["etaX",1],
zetaX.se = ldeModel1CoupledFit$output$standardErrors["zetaX",1],
etaY.est= ldeModel1CoupledFit$output$estimate["etaY"],
zetaY.est= ldeModel1CoupledFit$output$estimate["zetaY"],
etaY.se= ldeModel1CoupledFit$output$standardErrors["etaY",1],
zetaY.se= ldeModel1CoupledFit$output$standardErrors["zetaY",1],
gammaX.est=ldeModel1CoupledFit$output$estimate["gammaX"],
gammaX.se= ldeModel1CoupledFit$output$standardErrors["gammaX", 1],
gammaY.est=ldeModel1CoupledFit$output$estimate["gammaY"],
gammaY.se=ldeModel1CoupledFit$output$standardErrors["gammaY", 1],
VX.est=ldeModel1CoupledFit$output$estimate["VX"],
VdX.est=ldeModel1CoupledFit$output$estimate["VdX"],
Vd2X.est=ldeModel1CoupledFit$output$estimate["Vd2X"],
VX.se= ldeModel1CoupledFit$output$standardErrors["VX", 1],
VdX.se= ldeModel1CoupledFit$output$standardErrors["VdX", 1],
Vd2X.se=ldeModel1CoupledFit$output$standardErrors["Vd2X", 1],
VY.est=ldeModel1CoupledFit$output$estimate["VY"],
VdY.est=ldeModel1CoupledFit$output$estimate["VdY"],
Vd2Y.est=ldeModel1CoupledFit$output$estimate["Vd2Y"],
VY.se= ldeModel1CoupledFit$output$standardErrors["VY", 1],
VdY.se= ldeModel1CoupledFit$output$standardErrors["VdY", 1],
Vd2Y.se=ldeModel1CoupledFit$output$standardErrors["Vd2Y", 1])
}
# https://stat.ethz.ch/pipermail/r-help/2006-June/107734.html
#View(ldeout)
print(ldeout)
for (i in dyadids$dyad) {
# emdbed the data
tEmbedded <- cbind(gllaEmbed(tData$rsa.basec[tData$dyad==i], embed=embedD, tau=theTau, label="x", idColumn=FALSE),
gllaEmbed(tData$b.rsa.basec[tData$dyad==i], embed=embedD, tau=theTau, label="y", idColumn=FALSE))
#Create a 2nd order Multivariate LDE model.
manifestVars <- dimnames(tEmbedded)[[2]]
ldeModelCoupled1 <- mxModel("LDE_Coupled_Model_1",
mxMatrix("Iden", 2, name="I2"),
mxMatrix("Full",
values=LMatrix,
free=FALSE,
name="LFixed",
byrow=TRUE
),
mxMatrix("Zero", embedD*numIndicators, 2, name="Z"),
mxAlgebra(cbind(I2 %x% LFixed, Z), name="L"),
mxMatrix("Full", 8, 8,
values=c(  0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  1,  .1,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  .1,  1,
-.2,-.2,  0,  0,  0,  0,  0,  0,
0,  0,  0,-.2,-.2,  0,  0,  0),
labels=c(    NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,"gammaX",
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,"gammaY",    NA,
"etaX","zetaX",     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA, "etaY","zetaY",     NA,     NA,     NA),
free=c( F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,T,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,T,F,
T,T,F,F,F,F,F,F,
F,F,F,T,T,F,F,F),
ubound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     5,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     5,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
lbound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,    -5,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,    -5,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
name="A",
byrow=TRUE
),
mxMatrix("Symm", 8, 8,
values=c(  .8,
0, .8,
0, 0, .8,
-.1, -.1, 0, .8,
-.1, -.1, 0, 0, .8,
0, 0, 0, 0, 0, .8,
0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0),
free=c( T,
F, T,
F, F, T,
T, T, F, T,
T, T, F, F, T,
F, F, F, F, F, T,
F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F),
labels=c("VX",
NA, "VdX",
NA, NA, "Vd2X",
NA, NA, NA, "VY",
NA, NA, NA, NA, "VdY",
NA, NA, NA, NA, NA, "Vd2Y",
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
name="S",
byrow=TRUE,
lbound=c(0.00000001,
NA, 0.00000001,
NA, NA, 0.00000001,
NA, NA, NA, 0.00000001,
NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
),
mxMatrix("Diag", embedD*numIndicators, embedD*numIndicators,
values=.8,
free=TRUE,
labels=c(rep("uX", embedD), rep("uY", embedD)),
name="U",
lbound=0.000001
),
mxMatrix("Iden", 8, name="I"),
mxAlgebra(L %*% solve(I-A) %*% S %*% t(solve(I-A)) %*% t(L) + U,
name="R",
dimnames = list(manifestVars, manifestVars)
),
mxExpectationNormal(covariance="R"),
mxFitFunctionML(),
mxData(cov(tEmbedded),
type="cov",
numObs=dim(tEmbedded)[1]
)
)
ldeModel1CoupledFit <- mxRun(ldeModelCoupled1)
ldeout[(dyadids$rownum[dyadids$dyad==i]), ] = c(dyad = i, etaX.est = ldeModel1CoupledFit$output$estimate["etaX"],
zetaX.est =  ldeModel1CoupledFit$output$estimate["zetaX"],
etaX.se = ldeModel1CoupledFit$output$standardErrors["etaX",1],
zetaX.se = ldeModel1CoupledFit$output$standardErrors["zetaX",1],
etaY.est= ldeModel1CoupledFit$output$estimate["etaY"],
zetaY.est= ldeModel1CoupledFit$output$estimate["zetaY"],
etaY.se= ldeModel1CoupledFit$output$standardErrors["etaY",1],
zetaY.se= ldeModel1CoupledFit$output$standardErrors["zetaY",1],
gammaX.est=ldeModel1CoupledFit$output$estimate["gammaX"],
gammaX.se= ldeModel1CoupledFit$output$standardErrors["gammaX", 1],
gammaY.est=ldeModel1CoupledFit$output$estimate["gammaY"],
gammaY.se=ldeModel1CoupledFit$output$standardErrors["gammaY", 1],
VX.est=ldeModel1CoupledFit$output$estimate["VX"],
VdX.est=ldeModel1CoupledFit$output$estimate["VdX"],
Vd2X.est=ldeModel1CoupledFit$output$estimate["Vd2X"],
VX.se= ldeModel1CoupledFit$output$standardErrors["VX", 1],
VdX.se= ldeModel1CoupledFit$output$standardErrors["VdX", 1],
Vd2X.se=ldeModel1CoupledFit$output$standardErrors["Vd2X", 1],
VY.est=ldeModel1CoupledFit$output$estimate["VY"],
VdY.est=ldeModel1CoupledFit$output$estimate["VdY"],
Vd2Y.est=ldeModel1CoupledFit$output$estimate["Vd2Y"],
VY.se= ldeModel1CoupledFit$output$standardErrors["VY", 1],
VdY.se= ldeModel1CoupledFit$output$standardErrors["VdY", 1],
Vd2Y.se=ldeModel1CoupledFit$output$standardErrors["Vd2Y", 1])
}
# https://stat.ethz.ch/pipermail/r-help/2006-June/107734.html
#View(ldeout)
print(ldeout)
for (i in dyadids$dyad) {
# emdbed the data
tEmbedded <- cbind(gllaEmbed(tData$rsa.basec[tData$dyad==i], embed=embedD, tau=theTau, label="x", idColumn=FALSE),
gllaEmbed(tData$b.rsa.basec[tData$dyad==i], embed=embedD, tau=theTau, label="y", idColumn=FALSE))
#Create a 2nd order Multivariate LDE model.
manifestVars <- dimnames(tEmbedded)[[2]]
ldeModelCoupled1 <- mxModel("LDE_Coupled_Model_1",
mxMatrix("Iden", 2, name="I2"),
mxMatrix("Full",
values=LMatrix,
free=FALSE,
name="LFixed",
byrow=TRUE
),
mxMatrix("Zero", embedD*numIndicators, 2, name="Z"),
mxAlgebra(cbind(I2 %x% LFixed, Z), name="L"),
mxMatrix("Full", 8, 8,
values=c(  0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  1,  .1,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  .1,  1,
-.2,-.2,  0,  0,  0,  0,  0,  0,
0,  0,  0,-.2,-.2,  0,  0,  0),
labels=c(    NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,"gammaX",
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,"gammaY",    NA,
"etaX","zetaX",     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA, "etaY","zetaY",     NA,     NA,     NA),
free=c( F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,T,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,T,F,
T,T,F,F,F,F,F,F,
F,F,F,T,T,F,F,F),
ubound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     .4,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     .4,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
lbound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,    -.4,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,    -.4,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
name="A",
byrow=TRUE
),
mxMatrix("Symm", 8, 8,
values=c(  .8,
0, .8,
0, 0, .8,
-.1, -.1, 0, .8,
-.1, -.1, 0, 0, .8,
0, 0, 0, 0, 0, .8,
0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0),
free=c( T,
F, T,
F, F, T,
T, T, F, T,
T, T, F, F, T,
F, F, F, F, F, T,
F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F),
labels=c("VX",
NA, "VdX",
NA, NA, "Vd2X",
NA, NA, NA, "VY",
NA, NA, NA, NA, "VdY",
NA, NA, NA, NA, NA, "Vd2Y",
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
name="S",
byrow=TRUE,
lbound=c(0.00000001,
NA, 0.00000001,
NA, NA, 0.00000001,
NA, NA, NA, 0.00000001,
NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
),
mxMatrix("Diag", embedD*numIndicators, embedD*numIndicators,
values=.8,
free=TRUE,
labels=c(rep("uX", embedD), rep("uY", embedD)),
name="U",
lbound=0.000001
),
mxMatrix("Iden", 8, name="I"),
mxAlgebra(L %*% solve(I-A) %*% S %*% t(solve(I-A)) %*% t(L) + U,
name="R",
dimnames = list(manifestVars, manifestVars)
),
mxExpectationNormal(covariance="R"),
mxFitFunctionML(),
mxData(cov(tEmbedded),
type="cov",
numObs=dim(tEmbedded)[1]
)
)
ldeModel1CoupledFit <- mxRun(ldeModelCoupled1)
ldeout[(dyadids$rownum[dyadids$dyad==i]), ] = c(dyad = i, etaX.est = ldeModel1CoupledFit$output$estimate["etaX"],
zetaX.est =  ldeModel1CoupledFit$output$estimate["zetaX"],
etaX.se = ldeModel1CoupledFit$output$standardErrors["etaX",1],
zetaX.se = ldeModel1CoupledFit$output$standardErrors["zetaX",1],
etaY.est= ldeModel1CoupledFit$output$estimate["etaY"],
zetaY.est= ldeModel1CoupledFit$output$estimate["zetaY"],
etaY.se= ldeModel1CoupledFit$output$standardErrors["etaY",1],
zetaY.se= ldeModel1CoupledFit$output$standardErrors["zetaY",1],
gammaX.est=ldeModel1CoupledFit$output$estimate["gammaX"],
gammaX.se= ldeModel1CoupledFit$output$standardErrors["gammaX", 1],
gammaY.est=ldeModel1CoupledFit$output$estimate["gammaY"],
gammaY.se=ldeModel1CoupledFit$output$standardErrors["gammaY", 1],
VX.est=ldeModel1CoupledFit$output$estimate["VX"],
VdX.est=ldeModel1CoupledFit$output$estimate["VdX"],
Vd2X.est=ldeModel1CoupledFit$output$estimate["Vd2X"],
VX.se= ldeModel1CoupledFit$output$standardErrors["VX", 1],
VdX.se= ldeModel1CoupledFit$output$standardErrors["VdX", 1],
Vd2X.se=ldeModel1CoupledFit$output$standardErrors["Vd2X", 1],
VY.est=ldeModel1CoupledFit$output$estimate["VY"],
VdY.est=ldeModel1CoupledFit$output$estimate["VdY"],
Vd2Y.est=ldeModel1CoupledFit$output$estimate["Vd2Y"],
VY.se= ldeModel1CoupledFit$output$standardErrors["VY", 1],
VdY.se= ldeModel1CoupledFit$output$standardErrors["VdY", 1],
Vd2Y.se=ldeModel1CoupledFit$output$standardErrors["Vd2Y", 1])
}
# https://stat.ethz.ch/pipermail/r-help/2006-June/107734.html
#View(ldeout)
print(ldeout)
mean.na <- function (x) {
out <- mean(x, na.rm=T)
out
}
kzData1 <- read.csv("RCC_168_10sec.csv")
# respiratory sinus arrhythmia (RSA), centered on baseline RSA
kzData1<- within(kzData1, {rsabase.mean = ave(rsa, phase[kzData1$phase=="baseline"], FUN = mean.na)})
kzData1<- within(kzData1, {b.rsabase.mean = ave(b.rsa, phase[kzData1$phase=="baseline"], FUN = mean.na)})
kzData1<- within(kzData1, {ibibase.mean = ave(ibi, phase[kzData1$phase=="baseline"], FUN = mean.na)})
kzData1<- within(kzData1, {b.ibibase.mean = ave(b.ibi, phase[kzData1$phase=="baseline"], FUN = mean.na)})
kzData1$rsa.basec <- kzData1$rsa - kzData1$rsabase.mean
kzData1$b.rsa.basec <- kzData1$b.rsa - kzData1$b.rsabase.mean
kzData1b <- subset(kzData1, phase =="femaleprovide")
#kzData1b <- subset(kzData1, phase =="femalereceive")
tData2 <- as.data.frame(cbind(kzData1b$rsa.basec, kzData1b$b.rsa.basec))
colnames(tData2) <- c("x", "y")
acf(tData2)
# with IBI data
#kzData2 <- read.csv("/Users/zeekatherine/Desktop/R Files/RCC_Data/RCC_physio_shortintervals/RCC_168_5sec.csv")
#kzData2$ibi.wc <- kzData2$ibi - kzData2$ibibase
#kzData2$b.ibi.wc <- kzData2$b.ibi - kzData2$b.ibibase
#kzData2b <- subset (kzData2, phase == "femaleprovide")
#tData <- as.data.frame(cbind(kzData2b$ibi.wc, kzData2b$b.ibi.wc))
#colnames(tData) <- c("x", "y")
#acf(tData)
# ----------------------------------
# Time-delay embed the data.
embedD2 <- 4
theTau2 <- 1
deltaT2 <- 1
numIndicators2 <- 2
# ----------------------------------
# Time-delay embed the data.
tEmbedded2 <- cbind(gllaEmbed(tData2[,1], embed=embedD2, tau=theTau2, label="x", idColumn=FALSE),
gllaEmbed(tData2[,2], embed=embedD2, tau=theTau2, label="y", idColumn=FALSE))
# ----------------------------------
# Create the fixed LDE loading matrix.
L12 <- rep(1,embedD2)
L22 <- c(1:embedD2)*theTau2*deltaT2-mean(c(1:embedD2)*theTau2*deltaT2)
L32 <-  (L22^2)/2
LMatrix2 <- cbind(L12,L22,L32)
# ----------------------------------
# Create a 2nd order Multivariate LDE model.
manifestVars2 <- dimnames(tEmbedded2)[[2]]
ldeModelCoupled1_2 <- mxModel("LDE_Coupled_Model_1_2",
mxMatrix("Iden", 2, name="I2"),
mxMatrix("Full",
values=LMatrix2,
free=FALSE,
name="LFixed",
byrow=TRUE
),
mxMatrix("Zero", embedD2*numIndicators2, 2, name="Z"),
mxAlgebra(cbind(I2 %x% LFixed, Z), name="L"),
mxMatrix("Full", 8, 8,
values=c(  0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  1,  .1,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  .1,  1,
-.2,-.2,  0,  0,  0,  0,  0,  0,
0,  0,  0,-.2,-.2,  0,  0,  0),
labels=c(    NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,"gammaX",
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,"gammaY",    NA,
"etaX","zetaX",     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA, "etaY","zetaY",     NA,     NA,     NA),
free=c( F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,T,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,F,F,
F,F,F,F,F,F,T,F,
T,T,F,F,F,F,F,F,
F,F,F,T,T,F,F,F),
ubound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     .4,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     .4,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
lbound=c(   NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,    -.4,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,    -.4,    NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA,
NA,     NA,     NA,     NA,     NA,     NA,     NA,     NA),
name="A",
byrow=TRUE
),
mxMatrix("Symm", 8, 8,
values=c(  .8,
0, .8,
0, 0, .8,
-.1, -.1, 0, .8,
-.1, -.1, 0, 0, .8,
0, 0, 0, 0, 0, .8,
0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0),
free=c( T,
F, T,
F, F, T,
T, T, F, T,
T, T, F, F, T,
F, F, F, F, F, T,
F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F),
labels=c("VX",
NA, "VdX",
NA, NA, "Vd2X",
NA, NA, NA, "VY",
NA, NA, NA, NA, "VdY",
NA, NA, NA, NA, NA, "Vd2Y",
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
name="S",
byrow=TRUE,
lbound=c(0.00000001,
NA, 0.00000001,
NA, NA, 0.00000001,
NA, NA, NA, 0.00000001,
NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, 0.00000001,
NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA),
),
mxMatrix("Diag", embedD2*numIndicators2, embedD2*numIndicators2,
values=.8,
free=TRUE,
labels=c(rep("uX", embedD2), rep("uY", embedD2)),
name="U",
lbound=0.000001
),
mxMatrix("Iden", 8, name="I"),
mxAlgebra(L %*% solve(I-A) %*% S %*% t(solve(I-A)) %*% t(L) + U,
name="R",
dimnames = list(manifestVars2, manifestVars2)
),
mxExpectationNormal(covariance="R"),
mxFitFunctionML(),
mxData(cov(tEmbedded2),
type="cov",
numObs=dim(tEmbedded2)[1]
)
)
# ----------------------------------
# Fit the LDE model and examine the summary results.
ldeModel1CoupledFit_2 <- mxRun(ldeModelCoupled1_2)
summary(ldeModel1CoupledFit_2)
install.packages("FME")
q()
