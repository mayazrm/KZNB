<<<<<<< HEAD
rndtb2 <- subset(rndt, response.keys == "up")
# standard model
summary(lm(rt~valenceE + trial40c, data = rndtb2))
#random intercept models
intmod <- (lmer(rt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
#random intercept & slope
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
anova(intmod, slopemod)
#random intercept & slope of valence and word
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
selfrelplot <- ggplot(data=rndtb2, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence - Self-Relevant Traits Only", x="id", y="Log RT") +
stat_summary(aes(group=valence), fun.y = mean, geom="point", colour="black", size=2) +
=======
sqrt(0.09006438)
plot(density(vposranef$valencepositive))
vposranef<- -0.05165573 + ranef(valenceslope)[2]
mean(vposranef$valencepositive)
View(vposranef)
mean(vposranef$valence)
plot(density(vposranef$valencepositive))
plot(density(vposranef$valence))
quantile(vposranef$valencepositive)
quantile(vposranef$valence)
Dotplot(vposranef$valence)
stripchart(vposranef$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .20), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
stripchart(vposranef$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .20), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
stripchart(jitter(vposranef$valence), pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .20), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
stripchart(vposranef$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .20), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
stripchart(vposranef$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .10), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
Dotplot(vposranef$valence)
plot(density(vposranef$valence))
library(brms)
valenceslope.brm <- (brm(fixed=logrt ~ valence + trial40c,
data=rndtb2, random= ~ 1 + valence + trial40c | id),
chains=2, cores=4)
valenceslope.brm <- (brm(fixed=logrt ~ valence + trial40c,
data=rndtb2, random= ~ 1 + valence + trial40c | id,
chains=2, cores=4)
)
valenceslope.brm <- (brm(fixed=logrt ~ valence + trial40c + (1 + valence + trial40c | id),
data=rndtb2, chains=2, cores=4))
valenceslope.brm <- brm(logrt ~ valence + trial40c + (1 + valence + trial40c | id),
data=rndtb2, chains=2, cores=4)
summary(valenceslope.brm)
valslopesamp<-posterior.samples(valenceslope.brm)
View(valslopesamp)
plot(valslopesamp, N=2, pars=c("^b_"))
plot(valslopesamp, N=6, pars=c("^b_"))
plot(valslopesamp, N=6, pars=c("^b_"), do_plot=F)
plot(valslopesamp, N=6, pars=c("^b_"))
pdf(file="postplots.valenceslope.pdf", width=14, height=10)
plot(valslopesamp, N=6, pars=c("^b_"))
dev.off()
plot(valslopesamp)
pdf(file="postplots.valenceslope.pdf", width=20, height=20)
plot(valslopesamp, N=6, pars=c("^b_"))
dev.off()
pdf(file="postplots.valenceslope.pdf", width=30, height=30)
plot(valslopesamp, N=6, pars=c("^b_"))
dev.off()
View(valslopesamp)
plot(valslopesamp$b_valenceT.positive)
hist(valslopesamp, N=6, pars=c("^b_"))
hist(valslopesamp$b_valenceT.positive)
View(valslopesamp)
plot(density(valslopesamp$b_valenceT.positive))
plot(density(valslopesamp$sd_id_valenceT.positive))
abline(v=c(.04, .13))
stripchart(vposranef$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .10), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
quantile(vposranef$valence)
quantile(vposranef$valence, probs=c(.025, .975))
qnorm(c(.025, .975), mean=-.05, sd=.09)
qnorm(c(.025, .25, .75, .975), mean=-.05, sd=.09) #96% prediction interval for ranefs
mean(rndtb2$rt)
summary(lm(rt~valence + trial40c, data = rndtb2)) #run on raw rt
View(rndtb2)
hist(rndtb2$rt)
summary(lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id))) #raw rt
summary(lme(fixed=logrt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id)) #raw rt
summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id)) #raw rt
median(rndtb2rt)
median(rndtb2$rt)
rndtb$logrt <- log(rndtb$rt[valence=="positive"])
View(rndtb2)
View(rndtb)
rndtb$logrt <- log(rndtb$rt[rndtb$valence=="positive"])
View(rndtb)
ggplot(data=rndt, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence", x="id", y="Log RT") +
stat_summary(aes(group=key), fun.y = mean, geom="point", colour="black", size=2) +
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +
scale_color_manual(values=c("orangered3", "green4")) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position='none',
plot.title = element_text(lineheight=.8, face="bold"),
axis.title.y = element_text(face="bold", vjust=0.5),
axis.title.x = element_text(face="bold", vjust=-0.35)) +
facet_wrap(~id)
<<<<<<< HEAD
#ggsave(selfrelplot, file = "selfrelplot.pdf", height = 40/2.54, width = 64/2.54)
####### Updates - Stricter Exclusion Cutoff ######
# trimmed data: removed any < 100 ms and any greater than 2 SD above mean (1.29+.8*2=2.89)
sd(rndtb2$rt) # SD = 0.34
summary(rndtb2$rt) # M = .98
quantile(rndtb2$rt, c(.90, .95, .99))
rndtb <- subset(rndtb2, rt >= .01 & rt < 1.45) #90th percentile or below
mean(rndtb$rt)
median(rndtb$rt)
mean(rndtb$rt[rndtb$valence=="positive"])
mean(rndtb$rt[rndtb$valence=="negative"])
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtb))
summary(lm(rt~valenceE + trial40c, data = rndtb))
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id) + (1 | word),  data=rndtb))
valenceslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb, random= ~ 1 + valence + trial40c | id)) #raw rt
valenceslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id, random= ~ 1 | word))
valenceslope.raw <- (lme(fixed=rt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
summary(valenceslope.raw)
vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
quantile(vposranef.raw$valence, probs=c(.025, .975))
1000*quantile(vposranef.raw$valence, probs=c(.025, .5, .975))
stripchart(1000*vposranef.raw$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-250, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-150, 60))
vposranef.raw$valence
stripchart(1000*vposranef.raw$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-250, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-150, 60))
vposranef.raw$valence
vposranef.raw
stripchart(1000*vposranef.raw$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-250, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
stripchart(1000*vposranef.raw$valence[positive], pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-250, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
stripchart(1000*vposranef.raw$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-250, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-150, 60))
stripchart(1000*vposranef.raw$valence, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-350, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
quantile(vposranef.raw$valence, probs=c(.025, .975))
vposranef.raw
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-350, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-350, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-350, 250), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
summary(valenceslope.raw)
-0.1270142 + 2*0.08375127
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-350, 100), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-127, 60))
-0.1270142 - 2*0.08375127
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-295, -127, 4))
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-295, -127, 4), col = c("red", "black", "red"))
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-295, -127, 4), col = c("red", "black", "red"),
lwd = 3)
rndtb2$rt.z <- scale(rndtb2$rt)
sort(rndtb2$rt.z)
rndtz <- subset(rndtb2,  rt.z < 3) #within 3 SD of the mean RT
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtz))
summary(lm(rt~valenceE + trial40c, data = rndtz)) #run on raw rt
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtz))
#random intercept & slope of valence
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
#random intercept & slope of valence & random effects of time
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) ,  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) ,  data=rndtz))
#random intercept & slope of valence & random effects of time and word
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) + (1 | word),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
valenceslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c |id))
summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id)) #raw rt
#random intercept & slope of valence and trial: Raw RT
valenceslope.raw <- (lme(fixed=rt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
summary(valenceslope.raw)
vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
quantile(vposranef.raw$valence, probs=c(.025, .975))
1000*quantile(vposranef.raw$valence, probs=c(.025, .5, .975))
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-295, -127, 4), col = c("red", "black", "red"),
lwd = 3)
stripchart(1000*vposranef.raw, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-295, -127, 4), col = c("red", "black", "red"),
lwd = 3)
valenceslope.raw <- (lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
ranef(valenceslope.raw)
valenceslope.raw2 <- (lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
valenceslope.raw <- (lme(fixed=rt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
summary(valenceslope.raw)
summary(valenceslope.raw2)
ranef(valenceslope.raw2)[2]
ranef(valenceslope.raw2)$valenceE
ranef(valenceslope.raw2)
ranef(valenceslope.raw2)$id[2]
vposranef.raw2<- -0.167972 + ranef(valenceslope.raw2)$id[2]
vposranef.raw2
quantile(vposranef.raw2$valenceE, probs=c(.025, .975))
1000*quantile(vposranef.raw2$valenceE, probs=c(.025, .5, .975))
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-320, 50), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
summary(valenceslope.raw2)
-168+2*0.14725
-.168+2*0.14725
-.168-2*0.14725
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-463, -168, 127), col = c("red", "black", "red"),
lwd = 3)
pdf("random_wave2_dotplot.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-463, -168, 127), col = c("red", "black", "red"),
lwd = 3)
dev.off()
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
rnd <- read.csv("randomproject_data_aggregated_161021.csv")
library(nlme)
library(lme4)
library(ggplot2)
library(lmerTest)
theme_set(theme_bw(base_size = 14))
#For Bayesian analysis:
library(brms)
#For dotplots
library(Rcmdr)
#### RECODING TIME ####
# so that one unit (-.5, .5) = duration of study
rnd$trial40 <- (rnd$trials.thisN + 1)
rnd$trial40c <- (rnd$trial40 - 20)/40
#### TRIMMING & TRANSFORMING RT ####
# rt density plot
ggplot(rnd, aes(x=response.rt)) +
geom_density()
hist(rnd$response.rt)
# trimmed data: removed any < 100 ms and any greater than 3 SD above mean (1.29+.8*3=3.69)
sd(rnd$response.rt, na.rm=T) # SD = 0.35
summary(rnd$response.rt, na.rm=T) # M = 1.02
#rndt <- subset(rnd, rt >= .01 & rt < 3.69)
rndt <- rnd
##log transform latency scores
rndt$rt <- rndt$response.rt
rndt$logrt <- log(rndt$response.rt)
# log rt density plot - normal !
ggplot(rndt, aes(x=logrt)) +
geom_density()
rndt$id <- rndt$ID
rndt$valenceE <-recode(rndt$valence, as.factor.result=F, '"negative" = -0.5; "positive" = 0.5')
#### ANALYSES without Self-Relevance ####
###
#random intercept & slope for trial number (centered -.5, .5)
summary(lmer(rt ~ trial40c + (trial40c | id),  data=rndt))
### VALENCE EFFECT (objective valence of words)
# simple regression: no main effect of valence on rt
summary(lm(rt ~ valence, rndt)) # significant main effect
#random intercept model - ns fixed
summary(lmer(rt ~ valence + trial40c + (1 | id),  data=rndt)) # ME of valence
#random intercept & slope  - ns fixed
summary(lmer(rt ~ valence + trial40c + (valence + trial40c | id),  data=rndt)) # ME of valence
# plotted:
ggplot(data=rndt, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence", x="id", y="Log RT") +
stat_summary(aes(group=id), fun.y = mean, geom="point", colour="black", size=2) +
=======
rndt <- subset(rnd, rt >= .01 & rt < 3.69)
ggplot(data=rndt, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence", x="id", y="Log RT") +
stat_summary(aes(group=key), fun.y = mean, geom="point", colour="black", size=2) +
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +
scale_color_manual(values=c("orangered3", "green4")) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position='none',
plot.title = element_text(lineheight=.8, face="bold"),
axis.title.y = element_text(face="bold", vjust=0.5),
axis.title.x = element_text(face="bold", vjust=-0.35)) +
facet_wrap(~id)
<<<<<<< HEAD
##### Only looking at traits rated as self-descriptive ######
rndtb2 <- subset(rndt, response.keys == "up")
# standard model
summary(lm(rt~valenceE + trial40c, data = rndtb2))
#random intercept models
intmod <- (lmer(rt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
#random intercept & slope
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
anova(intmod, slopemod)
#random intercept & slope of valence and word
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
selfrelplot <- ggplot(data=rndtb2, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence - Self-Relevant Traits Only", x="id", y="Log RT") +
stat_summary(aes(group=valence), fun.y = mean, geom="point", colour="black", size=2) +
=======
rndt$logrt <- log(rndt$rt)
ggplot(data=rndt, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence", x="id", y="Log RT") +
stat_summary(aes(group=key), fun.y = mean, geom="point", colour="black", size=2) +
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +
scale_color_manual(values=c("orangered3", "green4")) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position='none',
plot.title = element_text(lineheight=.8, face="bold"),
axis.title.y = element_text(face="bold", vjust=0.5),
axis.title.x = element_text(face="bold", vjust=-0.35)) +
facet_wrap(~id)
<<<<<<< HEAD
ggsave(selfrelplot, file = "selfrelplot_N62.pdf", height = 40/2.54, width = 64/2.54)
# trimmed data: removed any < 100 ms and any greater than 2 SD above mean (1.29+.8*2=2.89)
sd(rndtb2$rt) # SD = 0.34
summary(rndtb2$rt) # M = .98
quantile(rndtb2$rt, c(.90, .95, .99))
rndtb <- subset(rndtb2, rt >= .01 & rt < 1.45) #90th percentile or below
mean(rndtb$rt)
median(rndtb$rt)
mean(rndtb$rt[rndtb$valence=="positive"])
mean(rndtb$rt[rndtb$valence=="negative"])
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtb))
summary(lm(rt~valenceE + trial40c, data = rndtb))
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtb))
#random intercept & slope of valence
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtb))
#random intercept & slope of valence plus random intercept of word
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id) + (1 | word),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id) + (1 | word),  data=rndtb))
#random intercept & slope of trial
noslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + trial40c | id))
summary(noslope)
####### Updates - Stricter Exclusion Cutoff 2 ######
rndtb2$rt.z <- scale(rndtb2$rt)
sort(rndtb2$rt.z)
rndtz <- subset(rndtb2,  rt.z < 3) #within 3 SD of the mean RT
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtz))
summary(lm(rt~valenceE + trial40c, data = rndtz)) #run on raw rt
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtz))
#random intercept & slope of valence
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
#random intercept & slope of valence & random effects of time
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) ,  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) ,  data=rndtz))
#random intercept & slope of valence & random effects of time and word
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) + (1 | word),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
#random intercept & slope of valence and trial
#valenceslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c |id))
#summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id)) #raw rt
#random intercept & slope of valence and trial: Raw RT
#valenceslope.raw <- (lme(fixed=rt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
valenceslope.raw2 <- (lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
#summary(valenceslope.raw)
summary(valenceslope.raw2)
#vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
vposranef.raw2<- -0.167972 + ranef(valenceslope.raw2)$id[2]
quantile(vposranef.raw2$valenceE, probs=c(.025, .975))
1000*quantile(vposranef.raw2$valenceE, probs=c(.025, .5, .975))
#pdf("random_wave2_dotplot.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-463, -168, 127), col = c("red", "black", "red"),
lwd = 3)
#dev.off()
pdf("random_wave2_dotplot_N62_161021.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-463, -168, 127), col = c("red", "black", "red"),
lwd = 3)
dev.off()
pdf("random_wave2_dotplot_N62_161021.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-463, -168, 127), col = c("red", "black", "red"),
lwd = 3)
dev.off()
valenceslope.raw2 <- (lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
summary(valenceslope.raw2)
vposranef.raw2<- -0.167972 + ranef(valenceslope.raw2)$id[2]
quantile(vposranef.raw2$valenceE, probs=c(.025, .975))
1000*quantile(vposranef.raw2$valenceE, probs=c(.025, .5, .975))
pdf("random_wave2_dotplot_N62_161021.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-408, -161, 32), col = c("red", "black", "red"),
lwd = 3)
dev.off()
git config --global --unset http.proxy
summary(valenceslope.raw2)
summary(valenceslope.raw2)
#vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
vposranef.raw2<- -0.174426 + ranef(valenceslope.raw2)$id[2]
quantile(vposranef.raw2$valenceE, probs=c(.025, .975))
1000*quantile(vposranef.raw2$valenceE, probs=c(.025, .5, .975))
pdf("random_wave2_dotplot_N62_161021.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-408, -161, 32), col = c("red", "black", "red"),
lwd = 3)
dev.off()
q()
# RANDOM PROJECT ANALYSES 161021
setwd("/Users/zeekatherine")
=======
summary(lm(rt~valence + trial40c, data = rndtb2))
summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence | id))
mean(rndtb2$rt[rndtb2$valence=="positive"])
mean(rndtb2$rt[rndtb2$valence=="negative"])
valenceslope.raw <- (lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id))
summary(valenceslope.raw)
vposranef.raw<- -0.0501060 + ranef(valenceslope.raw)[2]
View(vposranef.raw)
stripchart(vposranef.raw$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-.20, .10), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
abline(v=c(.04, .13))
View(vposranef)
quantile(vposranef.raw$valence, probs=c(.025, .975))
1000*quantile(vposranef.raw$valence, probs=c(.025, .975))
1000*quantile(vposranef.raw$valence, probs=c(.025, .5 .975))
1000*quantile(vposranef.raw$valence, probs=c(.025, .5, .975))
stripchart(1000*vposranef.raw$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-200, 100), xlab="Trait Valence Effect", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-150, 60))
stripchart(1000*vposranef.raw$valencepositive, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-200, 100), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-150, 60))
save.image("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
library(shinystan)
launch_shinystan()
launch_shinystan(valenceslope.brm)
launch_shiny
launch_shiny(valenceslope.brm, rstudio=T)
library(brms)
launch_shiny(valenceslope.brm, rstudio=T)
pp<-predict(valenceslope.brm)
View(pp)
plot(density(rndtb2$logrt))
par(mfrow=c(1,2))
plot(density(rndtb2$logrt))
plot(density(pp[,1]))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=(0, 2))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[,1]))
plot(density(pp[,1]))
par(mfrow=c(1,2))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[,1]), xlim=c(-1, .5), ylim=c(0, 2))
pp<-predict(valenceslope.brm)
par(mfrow=c(1,2))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[,1]), xlim=c(-1, .5), ylim=c(0, 2))
pp<-predict(valenceslope.brm, nsamples=6, summary=F)
View(pp)
str(pp)
par(mfrow=c(1,2))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[1,]), xlim=c(-1, .5), ylim=c(0, 2))
par(mfrow=c(1,4))
plot(density(rndtb2$logrt), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[1,]), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[2,]), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[3,]), xlim=c(-1, .5), ylim=c(0, 2))
par(mfrow=c(4,1))
plot(density(rndtb2$logrt), xlim=c(-1, 1.5), ylim=c(0, 1.5))
plot(density(pp[1,]), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[2,]), xlim=c(-1, .5), ylim=c(0, 2))
plot(density(pp[3,]), xlim=c(-1, .5), ylim=c(0, 2))
par(mfrow=c(4,1))
plot(density(rndtb2$logrt), xlim=c(-1, 1), ylim=c(0, 1.5))
plot(density(pp[1,]), xlim=c(-1, 1), ylim=c(0, 1.5))
plot(density(pp[2,]), xlim=c(-1, 1), ylim=c(0, 1.5))
plot(density(pp[3,]), xlim=c(-1, 1), ylim=c(0, 1.5))
save.image("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
library(car)
library(nlme)
library(lme4)
library(brms)
View(rndtb2)
#Create effect-coded valence;
rnd$valenceE <-recode(rnd$valence, as.factor.result=F, '"negative" = -0.5; "positive" = 0.5')
rndtb <- subset(rnd, rt >= .01 & rt < 2)
rndtb2 <- subset(rndtb, key == "up")
rm(valenceslope.brm)
rndbrm0<- brm(rt ~ trial40c + valenceE , data = rndtb2, chains = 2, cores = 4)
summary(rndbrm2)
rndbrm2 <- brm(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id),
data=rndtb2, chains=2, cores=4)
summary(rndbrm2)
rebrm2 <- ranef(rndbrm2)
mean(rebrm2$id[,2])
reval.brm2 <- (rebrm2$id[,2] + fixef(rndbrm2)[2,1]) #Create predicted re's
REbrm2 <- cbind(unique(rndtb2$id), reval.brm2)
ordrebrm2 <- REbrm2[order(REbrm2[, 2]), ] #Ordered by reval.brm2 (second column of REbrm2)
mebrm2 <- marginal_effects(rndbrm2, effects = "valenceE",
conditions = data.frame(id = unique(rndtb2$id), trial40c = 0),
re_formula = NULL, points=TRUE)
save.image("~/KZNB/hetergeneity1.RData")
View(ordrebrm2)
pdf(file="predrt-spaghetti-plot.pdf", width=14, height=10)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(0,2), xlim=c(-0.7, 0.7))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
# #Add in fixed effects line for Invisible Condition
# lines(predinv[, 1], predinv[, 2], lwd=5, col="red")
# abline(v=c(5, 10))
#
dev.off()
pdf(file="predrt-spaghetti-plot.pdf", width=14, height=10)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.5,1.5), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
# #Add in fixed effects line for Invisible Condition
# lines(predinv[, 1], predinv[, 2], lwd=5, col="red")
# abline(v=c(5, 10))
#
dev.off()
pdf(file="predrt-spaghetti-plot.pdf", width=10, height=10)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.6,1.4), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
# #Add in fixed effects line for Invisible Condition
# lines(predinv[, 1], predinv[, 2], lwd=5, col="red")
# abline(v=c(5, 10))
#
dev.off()
##Spaghetti Plot
pdf(file="predrt-spaghetti-plot.pdf", width=7, height=10)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.7,1.4), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
# #Add in fixed effects line for Invisible Condition
# lines(predinv[, 1], predinv[, 2], lwd=5, col="red")
# abline(v=c(5, 10))
#
dev.off()
##Spaghetti Plot
pdf(file="predrt-spaghetti-plot.pdf", width=4, height=8)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.7,1.4), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
# #Add in fixed effects line for Invisible Condition
# lines(predinv[, 1], predinv[, 2], lwd=5, col="red")
# abline(v=c(5, 10))
#
dev.off()
fixef(rndbrm2)
fixef(rndbrm2)[2]
predrt.fixed <- fixef(rndbrm2)[1] +
fixef(rndbrm2)[2]*mebrm2$valenceE$valenceE[mebrm2$valenceE$id==101]
predrt.fixed
pdf(file="predrt-spaghetti-plot.pdf", width=4, height=8)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.7,1.4), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
#Add in fixed effects line
lines(predrt.fixed, mebrm2$valenceE$valenceE[mebrm2$valenceE$id==101], lwd=5, col="red")
dev.off()
pdf(file="predrt-spaghetti-plot.pdf", width=4, height=8)
plot(rndtb2$valenceE, rndtb2$rt, ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="n", cex=2, lwd=2.5, bg="skyblue", ylim=c(.7,1.4), xlim=c(-0.5, 0.5))
for (i in ordrebrm2[,1])
{
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
}
#Add in fixed effects line
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==101], predrt.fixed, lwd=5, col="red")
dev.off()
save.image("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
View(rndtb2)
rndlme2 <- lme(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id),
data=rndtb2)
summary(rndlme2)
library(car)
library(nlme)
library(lme4)
library(brms)
rndlme2 <- lme(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id),
data=rndtb2)
summary(rndlme2)
View(rndtb2)
rndlmer2 <- lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id),
data=rndtb2)
summary(rndlmer2)
rndlmer2a <- lme(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id)
+ (1 | word), data=rndtb2)
summary(rndlmer2a)
rndlmer2a <- lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id)
+ (1 | word), data=rndtb2)
summary(rndlmer2a)
#Run Bayesian model: stimuli are random
rndbrm2a <- brm(rt ~ valenceE + trial40c + (1 + valenceE + trial40c | id)
+ (1 | word), data=rndtb2, chains=2, cores=4)
summary(rndbrm2a)
devtools::install_github("mvuorre/bmlm")
save.image("~/KZNB/hetergeneity1.RData")
library(car)
library(nlme)
library(lme4)
library(brms)
load("~/KZNB/hetergeneity1.RData")
rndbrm0<- brm(rt ~ trial40c + valenceE , data = rndtb2, chains = 2, cores = 4)
summary(rndbrm0)
R.Version()
sqrt(.003)
remove.packages("rstan")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
install.packages('rstan', repos = 'https://cloud.r-project.org/', dependencies = TRUE)
load("~/KZNB/hetergeneity1.RData")
install.packages("brms")
install.packages("lme4")
library(lme4)
library(brms)
rndbrm0<- brm(rt ~ trial40c + valenceE , data = rndtb2, chains = 2, cores = 4)
load("~/KZNB/hetergeneity1.RData")
rndbrm0<- brm(rt ~ trial40c + valenceE , data = rndtb2, chains = 2, cores = 4)
summary(rndbrm0)
library(brms)
library(lme4)
rndbrm0<- brm(rt ~ trial40c + valenceE , data = rndtb2, chains = 2, cores = 4)
summary(rndbrm0)
summary(rndbrm2a)
rndlmer2b <- lmer(rt ~ valenceE + trial40c
+ (1 | word), data=rndtb2)
summary(rndlmer2b)
summary(rndlmer2)
summary(rndbrm2a)
rebrm2a<-ranef(rndbrm2a)
head(rebrm2a)
head(rebrm2a$word)
str(rebrm2a$word)
ordrebrm2.word <- rebrm2a$word[order(rebrm2a$word[, 1]), ] #Ordered by reval.brm2 (by size of rt)
head(rebrm2a.word)
head(ordrebrm2a.word)
ordrebrm2a.word <- rebrm2a$word[order(rebrm2a$word[, 1]), ] #Ordered by reval.brm2 (by size of rt)
head(ordrebrm2a.word)
rebrm2a<-ranef(rndbrm2a) + 1.07
rebrm2a<-(ranef(rndbrm2a)) + 1.07
head(rebrm2a$word)
ordrebrm2a.word <- rebrm2a$word[order(rebrm2a$word[, 1]), ] + 1.07 #Ordered by reval.brm2 (by size of rt)
head(ordrebrm2a.word)
print(ordrebrm2a.word)
summary(rndlmer2b)
pdf(file="predrt-by-valence1.pdf", width=30, height=22)
par(mfrow=c(5,14))
for (i in unique(rndtb2$id)) {
plot(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$Estimate[mebrm2$valenceE$id==i],
ylab="Predicted RT (seconds)", xlab="Valence (-.5,+.5)",
type="l", cex=2, lwd=2.5, bg="skyblue", ylim=c(0,2), xlim=c(-0.7, 0.7),
main=paste("id ", round(i, digits=3), sep = " "))
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$lowerCI[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
lines(mebrm2$valenceE$valenceE[mebrm2$valenceE$id==i],
mebrm2$valenceE$upperCI[mebrm2$valenceE$id==i], lty=1, lwd=1.5, col="black")
points(rndtb2$valenceE[rndtb2$id==i], rndtb2$rt[rndtb2$id==i], pch=21, cex=1.2, bg="skyblue")
#abline(v=c(5, 6, 10))
}
dev.off()
save.image("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
rndbrm2asamp <- posterior_samples(rndbrm2a, "^sd")
library(car)
library(nlme)
library(lme4)
library(brms)
summary(rndbrm2a)
rndbrm2asamp <- posterior_samples(rndbrm2a, "^sd")
head(rndbrm2asamp)
hist(rndbrm2asamp$sd_id_valenceE)
plot(density(rndbrm2asamp$sd_id_valenceE))
plot(density(rndbrm2asamp$sd_word_Intercept))
sd(rebrm2$id[,2])
rndbrm2a.stancode <- stancode(rndbrm2a)
rndbrm2a.stancode
rndbrm2a.stancode
head(rndbrm2asamp)
scatterplot(rndbrm2asamp$sd_word_Intercept, rndbrm2asamp$sd_id_valenceE)
scatterplot(rndbrm2asamp$sd_word_Intercept, rndbrm2asamp$sd_id_valenceE,
xlim = c(0, 0.17), ylim = c(0, 0.17))
save.image("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
summary(rndbrm2a)
ranef(rndbrm2a)
library(car)
library(nlme)
library(lme4)
library(brms)
ranef(rndbrm2a)
sort(ranef(rndbrm2a)$word)
sqrt(.085)
load("~/KZNB/hetergeneity1.RData")
load("~/KZNB/hetergeneity1.RData")
summary(rndlmer2)
summary(rndlmer2a)
library(car)
library(nlme)
library(lme4)
library(brms)
anova.lme(rndlmer2, rndlmer2a, rndlmer2b)
anova.lme(rndlmer2, rndlmer2a)
anova(rndlmer2, rndlmer2a)
anova(rndlmer2, rndlmer2b)
anova(rndbrm2, rndbrm2b)
summary(rndbrm2)
LOO(rndbrm2, rndbrm2b)
LOO(rndbrm2, rndbrm2a)
WAIC(rndbrm2, rndbrm2a)
summary(rndbrm2)
summary(rndbrm2a)
setwd("C:/Users/Niall/Dropbox/NIALL1/MET/Analysis of Change Course/2014 Fall/Lecture 1/R")
load("C:/Users/Niall/Dropbox/NIALL1/MET/Analysis of Change Course/2014 Fall/Lecture 1/R/RTtiny.RData")
View(RTtiny)
sqrt(.003)
sqrt(.006)
sqrt(.007)
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
setwd("~/KZNB")
rnd <- read.csv("randomproject_data_aggregated_161021.csv")
library(nlme)
library(lme4)
library(ggplot2)
library(lmerTest)
theme_set(theme_bw(base_size = 14))
#For Bayesian analysis:
library(brms)
#For dotplots
library(Rcmdr)
<<<<<<< HEAD
#### RECODING TIME ####
# so that one unit (-.5, .5) = duration of study
rnd$trial40 <- (rnd$trials.thisN + 1)
rnd$trial40c <- (rnd$trial40 - 20)/40
#### TRIMMING & TRANSFORMING RT ####
# rt density plot
=======
rnd$trial40 <- (rnd$trials.thisN + 1)
rnd$trial40c <- (rnd$trial40 - 20)/40
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
ggplot(rnd, aes(x=response.rt)) +
geom_density()
hist(rnd$response.rt)
# trimmed data: removed any < 100 ms and any greater than 3 SD above mean (1.29+.8*3=3.69)
sd(rnd$response.rt, na.rm=T) # SD = 0.35
summary(rnd$response.rt, na.rm=T) # M = 1.02
#rndt <- subset(rnd, rt >= .01 & rt < 3.69)
rndt <- rnd
<<<<<<< HEAD
##log transform latency scores
=======
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
rndt$rt <- rndt$response.rt
rndt$logrt <- log(rndt$response.rt)
# log rt density plot - normal !
ggplot(rndt, aes(x=logrt)) +
geom_density()
rndt$id <- rndt$ID
rndt$valenceE <-recode(rndt$valence, as.factor.result=F, '"negative" = -0.5; "positive" = 0.5')
<<<<<<< HEAD
#### ANALYSES without Self-Relevance ####
###
#random intercept & slope for trial number (centered -.5, .5)
summary(lmer(rt ~ trial40c + (trial40c | id),  data=rndt))
### VALENCE EFFECT (objective valence of words)
# simple regression: no main effect of valence on rt
summary(lm(rt ~ valence, rndt)) # significant main effect
#random intercept model - ns fixed
summary(lmer(rt ~ valence + trial40c + (1 | id),  data=rndt)) # ME of valence
#random intercept & slope  - ns fixed
summary(lmer(rt ~ valence + trial40c + (valence + trial40c | id),  data=rndt)) # ME of valence
# plotted:
ggplot(data=rndt, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence", x="id", y="Log RT") +
stat_summary(aes(group=id), fun.y = mean, geom="point", colour="black", size=2) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +
scale_color_manual(values=c("orangered3", "green4")) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position='none',
plot.title = element_text(lineheight=.8, face="bold"),
axis.title.y = element_text(face="bold", vjust=0.5),
axis.title.x = element_text(face="bold", vjust=-0.35)) +
facet_wrap(~id)
##### Only looking at traits rated as self-descriptive ######
rndtb2 <- subset(rndt, response.keys == "up")
# standard model
summary(lm(rt~valenceE + trial40c, data = rndtb2))
#random intercept models
intmod <- (lmer(rt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (1 | ID),  data=rndtb2)) # ME valence
#random intercept & slope
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID),  data=rndtb2)) # ME valence
anova(intmod, slopemod)
#random intercept & slope of valence and word
summary(lmer(rt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
summary(lmer(logrt ~ valenceE + trial40c + (valenceE | ID) + (1 | word),  data=rndtb2)) # ME valence
selfrelplot <- ggplot(data=rndtb2, aes(x=valence, y=logrt)) +
geom_jitter(aes(color=as.factor(valence)), position = position_jitter(width = .2), size=1.5) +
labs(title = "Log RT by Valence - Self-Relevant Traits Only", x="id", y="Log RT") +
stat_summary(aes(group=valence), fun.y = mean, geom="point", colour="black", size=2) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar', size = .5) +
scale_color_manual(values=c("orangered3", "green4")) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position='none',
plot.title = element_text(lineheight=.8, face="bold"),
axis.title.y = element_text(face="bold", vjust=0.5),
axis.title.x = element_text(face="bold", vjust=-0.35)) +
facet_wrap(~id)
#ggsave(selfrelplot, file = "selfrelplot_N62.pdf", height = 40/2.54, width = 64/2.54)
####### Updates - Stricter Exclusion Cutoff ######
# trimmed data: removed any < 100 ms and any greater than 2 SD above mean (1.29+.8*2=2.89)
sd(rndtb2$rt) # SD = 0.34
summary(rndtb2$rt) # M = .98
quantile(rndtb2$rt, c(.90, .95, .99))
rndtb <- subset(rndtb2, rt >= .01 & rt < 1.45) #90th percentile or below
mean(rndtb$rt)
median(rndtb$rt)
mean(rndtb$rt[rndtb$valence=="positive"])
mean(rndtb$rt[rndtb$valence=="negative"])
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtb))
summary(lm(rt~valenceE + trial40c, data = rndtb))
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtb))
#random intercept & slope of valence
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtb))
#random intercept & slope of valence plus random intercept of word
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id) + (1 | word),  data=rndtb))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id) + (1 | word),  data=rndtb))
#random intercept & slope of trial
noslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + trial40c | id))
summary(noslope)
####### Updates - Stricter Exclusion Cutoff 2 ######
rndtb2$rt.z <- scale(rndtb2$rt)
sort(rndtb2$rt.z)
rndtz <- subset(rndtb2,  rt.z < 3) #within 3 SD of the mean RT
# standard model -- Significant main effect of valence
summary(lm(logrt~valenceE + trial40c, data = rndtz))
summary(lm(rt~valenceE + trial40c, data = rndtz)) #run on raw rt
#random intercept model
summary(lmer(logrt ~ valenceE + trial40c + (1 | id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtz))
#random intercept & slope of valence
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
#random intercept & slope of valence & random effects of time
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) ,  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) ,  data=rndtz))
#random intercept & slope of valence & random effects of time and word
summary(lmer(logrt ~ valenceE + trial40c + (1 + valenceE + trial40c | id) + (1 | word),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
#random intercept & slope of valence and trial
#valenceslope <- (lme(fixed=logrt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c |id))
#summary(lme(fixed=rt ~ valence + trial40c,  data=rndtb2, random= ~ 1 + valence + trial40c | id)) #raw rt
#random intercept & slope of valence and trial: Raw RT
#valenceslope.raw <- (lme(fixed=rt ~ valenceE + trial40c,  data=rndtb, random= ~ 1 + valenceE + trial40c | id))
valenceslope.raw2 <- (lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
#summary(valenceslope.raw)
summary(valenceslope.raw2)
#vposranef.raw<- -0.1270142 + ranef(valenceslope.raw)[2]
vposranef.raw2<- -0.174426 + ranef(valenceslope.raw2)$id[2]
quantile(vposranef.raw2$valenceE, probs=c(.025, .975))
1000*quantile(vposranef.raw2$valenceE, probs=c(.025, .5, .975))
#pdf("random_wave2_dotplot_N62_161021.pdf", width = 16, height = 8)
stripchart(1000*vposranef.raw2, pch=21, bg="skyblue", cex=3.5, lwd=2,
xlim=c(-500, 150), xlab="Trait Valence Effect (in Milliseconds)", cex.axis=1.5, cex.lab=1.5)
abline(v=c(-408, -161, 32), col = c("red", "black", "red"),
lwd = 3)
#dev.off()
summary(lm(rt~valenceE + trial40c, data = rndtz)) #run on raw rt
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) ,  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 | id),  data=rndtz))
=======
rndtb2$rt.z <- scale(rndtb2$rt)
sort(rndtb2$rt.z)
rndtz <- subset(rndtb2,  rt.z < 3) #within 3 SD of the mean RT
rndtb2 <- subset(rndt, response.keys == "up")
rndtb2$rt.z <- scale(rndtb2$rt)
sort(rndtb2$rt.z)
rndtz <- subset(rndtb2,  rt.z < 3) #within 3 SD of the mean RT
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE| id),  data=rndtz))
summary(lmer(rt ~ valenceE + trial40c + (1 + valenceE + trial40c| id) + (1 | word),  data=rndtz))
>>>>>>> 8d68aa79b7a3ba4ee957f4d1f228fe1d6ec4846c
